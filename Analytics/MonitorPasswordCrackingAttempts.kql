// Same as Microsoft Built-in Rule with few additional lines to ignore disabled accounts
// Getting a list of unique disabled accounts so we can ignore these alerts against them
let DisabledAccounts = IdentityInfo
| where IsAccountEnabled == false
| distinct AccountUPN;
let s_threshold = 30;
let l_threshold = 3;
SigninLogs
| where UserPrincipalName !in (DisabledAccounts) // Ignoring disabled accounts
| where OperationName =~ "Sign-in activity"
// Error codes that we want to look at as they are related to the use of incorrect password.
| where ResultType in ("50126", "50053" , "50055", "50056")
| extend OS = DeviceDetail.operatingSystem, Browser = DeviceDetail.browser 
| extend LocationString= strcat(tostring(LocationDetails["countryOrRegion"]), "/", tostring(LocationDetails["state"]), "/", tostring(LocationDetails["city"]))
| summarize StartTime = min(TimeGenerated), EndTime = max(TimeGenerated),LocationCount=dcount(LocationString), Location = make_set(LocationString), 
IPAddress = make_set(IPAddress), IPAddressCount = dcount(IPAddress), AppDisplayName = make_set(AppDisplayName), ResultDescription = make_set(ResultDescription), 
Browser = make_set(Browser), OS = make_set(OS), SigninCount = count() by UserPrincipalName                               
// Setting a generic threshold - Can be different for different environment
| where SigninCount > s_threshold and LocationCount >= l_threshold
| extend tostring(Location), tostring(IPAddress), tostring(AppDisplayName), tostring(ResultDescription), tostring(Browser), tostring(OS)
| distinct *
| extend timestamp = StartTime, AccountCustomEntity = UserPrincipalName, IPCustomEntity = IPAddress
